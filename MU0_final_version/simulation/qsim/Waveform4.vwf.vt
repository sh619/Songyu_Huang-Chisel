// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/07/2020 00:01:15"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          statemachine
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module statemachine_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] cs;
reg extra;
// wires                                               
wire EXEC1;
wire EXEC2;
wire FETCH;
wire [2:0] NS;

// assign statements (if any)                          
statemachine i1 (
// port map - connection between master ports and signals/registers   
	.EXEC1(EXEC1),
	.EXEC2(EXEC2),
	.FETCH(FETCH),
	.NS(NS),
	.cs(cs),
	.extra(extra)
);
initial 
begin 
#1000000 $finish;
end 
// cs[ 2 ]
initial
begin
	repeat(12)
	begin
		cs[2] = 1'b0;
		cs[2] = #40000 1'b1;
		# 40000;
	end
	cs[2] = 1'b0;
end 
// cs[ 1 ]
always
begin
	cs[1] = 1'b0;
	cs[1] = #20000 1'b1;
	#20000;
end 
// cs[ 0 ]
always
begin
	cs[0] = 1'b0;
	cs[0] = #10000 1'b1;
	#10000;
end 

// extra
initial
begin
	extra = 1'b0;
	extra = #250000 1'b1;
	extra = #200000 1'b0;
end 
endmodule

